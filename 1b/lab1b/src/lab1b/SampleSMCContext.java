/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : SampleSMC.sm
 */

package lab1b;


public class SampleSMCContext
    extends statemap.FSMContext
{
//---------------------------------------------------------------
// Member methods.
//

    public SampleSMCContext(SampleSMC owner)
    {
        this (owner, SampleSMCMap.ReadName);
    }

    public SampleSMCContext(SampleSMC owner, SampleSMCState initState)
    {
        super (initState);

        mOwner = owner;
    }

    @Override
    public void enterStartState()
    {
        getState().entry(this);
    }

    public void closeBracket()
    {
        mTransition = "closeBracket";
        getState().closeBracket(this);
        mTransition = "";
    }

    public void cm()
    {
        mTransition = "cm";
        getState().cm(this);
        mTransition = "";
    }

    public void digit(char d)
    {
        mTransition = "digit";
        getState().digit(this, d);
        mTransition = "";
    }

    public void equal()
    {
        mTransition = "equal";
        getState().equal(this);
        mTransition = "";
    }

    public void letter(char l)
    {
        mTransition = "letter";
        getState().letter(this, l);
        mTransition = "";
    }

    public void newLine()
    {
        mTransition = "newLine";
        getState().newLine(this);
        mTransition = "";
    }

    public void openBracket()
    {
        mTransition = "openBracket";
        getState().openBracket(this);
        mTransition = "";
    }

    public void oxford()
    {
        mTransition = "oxford";
        getState().oxford(this);
        mTransition = "";
    }

    public void reset()
    {
        mTransition = "reset";
        getState().reset(this);
        mTransition = "";
    }

    public void space()
    {
        mTransition = "space";
        getState().space(this);
        mTransition = "";
    }

    public SampleSMCState getState()
        throws statemap.StateUndefinedException
    {
        if (mState == null)
        {
            throw(
                new statemap.StateUndefinedException());
        }

        return ((SampleSMCState) mState);
    }

    protected SampleSMC getOwner()
    {
        return (mOwner);
    }

    public void setOwner(SampleSMC owner)
    {
        if (owner == null)
        {
            throw (
                new NullPointerException(
                    "null owner"));
        }
        else
        {
            mOwner = owner;
        }
    }

//---------------------------------------------------------------
// Member data.
//

    private transient SampleSMC mOwner;

    //-----------------------------------------------------------
    // Constants.
    //

    private static final long serialVersionUID = 1L;

//---------------------------------------------------------------
// Inner classes.
//

    public static abstract class SampleSMCState
        extends statemap.State
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected SampleSMCState(String name, int id)
        {
            super (name, id);
        }

        protected void entry(SampleSMCContext context) {}
        protected void exit(SampleSMCContext context) {}

        protected void closeBracket(SampleSMCContext context)
        {
            Default(context);
        }

        protected void cm(SampleSMCContext context)
        {
            Default(context);
        }

        protected void digit(SampleSMCContext context, char d)
        {
            Default(context);
        }

        protected void equal(SampleSMCContext context)
        {
            Default(context);
        }

        protected void letter(SampleSMCContext context, char l)
        {
            Default(context);
        }

        protected void newLine(SampleSMCContext context)
        {
            Default(context);
        }

        protected void openBracket(SampleSMCContext context)
        {
            Default(context);
        }

        protected void oxford(SampleSMCContext context)
        {
            Default(context);
        }

        protected void reset(SampleSMCContext context)
        {
            Default(context);
        }

        protected void space(SampleSMCContext context)
        {
            Default(context);
        }

        protected void Default(SampleSMCContext context)
        {
            throw (
                new statemap.TransitionUndefinedException(
                    "State: " +
                    context.getState().getName() +
                    ", Transition: " +
                    context.getTransition()));
        }

    //-----------------------------------------------------------
    // Member data.
    //

        //-------------------------------------------------------
    // Constants.
    //

        private static final long serialVersionUID = 1L;
    }

    /* package */ static abstract class SampleSMCMap
    {
    //-----------------------------------------------------------
    // Member methods.
    //

    //-----------------------------------------------------------
    // Member data.
    //

        //-------------------------------------------------------
        // Constants.
        //

        public static final SampleSMCMap_ReadName ReadName =
            new SampleSMCMap_ReadName("SampleSMCMap.ReadName", 0);
        public static final SampleSMCMap_ReadNext ReadNext =
            new SampleSMCMap_ReadNext("SampleSMCMap.ReadNext", 1);
        public static final SampleSMCMap_BlankName BlankName =
            new SampleSMCMap_BlankName("SampleSMCMap.BlankName", 2);
        public static final SampleSMCMap_ReadParams ReadParams =
            new SampleSMCMap_ReadParams("SampleSMCMap.ReadParams", 3);
        public static final SampleSMCMap_DigitParam DigitParam =
            new SampleSMCMap_DigitParam("SampleSMCMap.DigitParam", 4);
        public static final SampleSMCMap_LetterParam LetterParam =
            new SampleSMCMap_LetterParam("SampleSMCMap.LetterParam", 5);
        public static final SampleSMCMap_BlankParam BlankParam =
            new SampleSMCMap_BlankParam("SampleSMCMap.BlankParam", 6);
        public static final SampleSMCMap_Comma Comma =
            new SampleSMCMap_Comma("SampleSMCMap.Comma", 7);
        public static final SampleSMCMap_Closing Closing =
            new SampleSMCMap_Closing("SampleSMCMap.Closing", 8);
        public static final SampleSMCMap_Fin Fin =
            new SampleSMCMap_Fin("SampleSMCMap.Fin", 9);
        public static final SampleSMCMap_Error Error =
            new SampleSMCMap_Error("SampleSMCMap.Error", 10);
    }

    protected static class SampleSMCMap_Default
        extends SampleSMCState
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected SampleSMCMap_Default(String name, int id)
        {
            super (name, id);
        }

    //-----------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class SampleSMCMap_ReadName
        extends SampleSMCMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private SampleSMCMap_ReadName(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void Default(SampleSMCContext context)
        {
            SampleSMC ctxt = context.getOwner();

            (context.getState()).exit(context);
            context.clearState();
            try
            {
                ctxt.notAcceptable();
            }
            finally
            {
                context.setState(SampleSMCMap.Error);
                (context.getState()).entry(context);
            }


        }

        @Override
        protected void letter(SampleSMCContext context, char l)
        {
            SampleSMC ctxt = context.getOwner();

            if (ctxt.lenCheck()==true && ctxt.eqCheck()==true)
            {
                (context.getState()).exit(context);
                context.clearState();
                try
                {
                    ctxt.lenClear();
                    ctxt.funcWrite(l);
                }
                finally
                {
                    context.setState(SampleSMCMap.ReadNext);
                    (context.getState()).entry(context);
                }

            }
            else
            {
                (context.getState()).exit(context);
                context.clearState();
                try
                {
                    ctxt.lenClear();
                }
                finally
                {
                    context.setState(SampleSMCMap.ReadNext);
                    (context.getState()).entry(context);
                }

            }
        }

        @Override
        protected void space(SampleSMCContext context)
        {


        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class SampleSMCMap_ReadNext
        extends SampleSMCMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private SampleSMCMap_ReadNext(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void Default(SampleSMCContext context)
        {
            SampleSMC ctxt = context.getOwner();

            (context.getState()).exit(context);
            context.clearState();
            try
            {
                ctxt.notAcceptable();
            }
            finally
            {
                context.setState(SampleSMCMap.Error);
                (context.getState()).entry(context);
            }


        }

        @Override
        protected void digit(SampleSMCContext context, char d)
        {
            SampleSMC ctxt = context.getOwner();

            if (ctxt.lenCheck()==true && ctxt.eqCheck()==true)
            {
                SampleSMCState endState = context.getState();
                context.clearState();
                try
                {
                    ctxt.lenInc();
                    ctxt.funcWrite(d);
                }
                finally
                {
                    context.setState(endState);
                }

            }
            else if (ctxt.lenCheck()==true)
            {
                SampleSMCState endState = context.getState();
                context.clearState();
                try
                {
                    ctxt.lenInc();
                }
                finally
                {
                    context.setState(endState);
                }

            }
            else
            {
                super.digit(context, d);
            }

        }

        @Override
        protected void equal(SampleSMCContext context)
        {
            SampleSMC ctxt = context.getOwner();

            if (ctxt.eqCheck()==false)
            {
                (context.getState()).exit(context);
                context.clearState();
                try
                {
                    ctxt.eqUpdate();
                }
                finally
                {
                    context.setState(SampleSMCMap.ReadName);
                    (context.getState()).entry(context);
                }

            }

            else
            {
                super.equal(context);
            }

        }

        @Override
        protected void letter(SampleSMCContext context, char l)
        {
            SampleSMC ctxt = context.getOwner();

            if (ctxt.lenCheck()==true && ctxt.eqCheck()==true)
            {
                SampleSMCState endState = context.getState();
                context.clearState();
                try
                {
                    ctxt.lenInc();
                    ctxt.funcWrite(l);
                }
                finally
                {
                    context.setState(endState);
                }

            }
            else if (ctxt.lenCheck()==true)
            {
                SampleSMCState endState = context.getState();
                context.clearState();
                try
                {
                    ctxt.lenInc();
                }
                finally
                {
                    context.setState(endState);
                }

            }
            else
            {
                super.letter(context, l);
            }

        }

        @Override
        protected void openBracket(SampleSMCContext context)
        {
            SampleSMC ctxt = context.getOwner();

            if (ctxt.eqCheck()==true && ctxt.lenCheck()==true)
            {
                (context.getState()).exit(context);
                // No actions.
                context.setState(SampleSMCMap.ReadParams);
                (context.getState()).entry(context);
            }

            else
            {
                super.openBracket(context);
            }

        }

        @Override
        protected void space(SampleSMCContext context)
        {

            (context.getState()).exit(context);
            context.setState(SampleSMCMap.BlankName);
            (context.getState()).entry(context);

        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class SampleSMCMap_BlankName
        extends SampleSMCMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private SampleSMCMap_BlankName(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void Default(SampleSMCContext context)
        {
            SampleSMC ctxt = context.getOwner();

            (context.getState()).exit(context);
            context.clearState();
            try
            {
                ctxt.notAcceptable();
            }
            finally
            {
                context.setState(SampleSMCMap.Error);
                (context.getState()).entry(context);
            }


        }

        @Override
        protected void equal(SampleSMCContext context)
        {
            SampleSMC ctxt = context.getOwner();

            if (ctxt.eqCheck()==false && ctxt.lenCheck()==true)
            {
                (context.getState()).exit(context);
                context.clearState();
                try
                {
                    ctxt.eqUpdate();
                }
                finally
                {
                    context.setState(SampleSMCMap.ReadName);
                    (context.getState()).entry(context);
                }

            }

            else
            {
                super.equal(context);
            }

        }

        @Override
        protected void openBracket(SampleSMCContext context)
        {
            SampleSMC ctxt = context.getOwner();

            if (ctxt.eqCheck()==true && ctxt.lenCheck()==true)
            {
                (context.getState()).exit(context);
                // No actions.
                context.setState(SampleSMCMap.ReadParams);
                (context.getState()).entry(context);
            }

            else
            {
                super.openBracket(context);
            }

        }

        @Override
        protected void space(SampleSMCContext context)
        {


        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class SampleSMCMap_ReadParams
        extends SampleSMCMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private SampleSMCMap_ReadParams(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void Default(SampleSMCContext context)
        {
            SampleSMC ctxt = context.getOwner();

            (context.getState()).exit(context);
            context.clearState();
            try
            {
                ctxt.notAcceptable();
            }
            finally
            {
                context.setState(SampleSMCMap.Error);
                (context.getState()).entry(context);
            }


        }

        @Override
        protected void closeBracket(SampleSMCContext context)
        {

            (context.getState()).exit(context);
            context.setState(SampleSMCMap.Closing);
            (context.getState()).entry(context);

        }

        @Override
        protected void digit(SampleSMCContext context, char d)
        {
            SampleSMC ctxt = context.getOwner();

            (context.getState()).exit(context);
            context.clearState();
            try
            {
                ctxt.lenClear();
            }
            finally
            {
                context.setState(SampleSMCMap.DigitParam);
                (context.getState()).entry(context);
            }


        }

        @Override
        protected void letter(SampleSMCContext context, char l)
        {
            SampleSMC ctxt = context.getOwner();

            (context.getState()).exit(context);
            context.clearState();
            try
            {
                ctxt.lenClear();
            }
            finally
            {
                context.setState(SampleSMCMap.LetterParam);
                (context.getState()).entry(context);
            }


        }

        @Override
        protected void space(SampleSMCContext context)
        {


        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class SampleSMCMap_DigitParam
        extends SampleSMCMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private SampleSMCMap_DigitParam(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void Default(SampleSMCContext context)
        {
            SampleSMC ctxt = context.getOwner();

            (context.getState()).exit(context);
            context.clearState();
            try
            {
                ctxt.notAcceptable();
            }
            finally
            {
                context.setState(SampleSMCMap.Error);
                (context.getState()).entry(context);
            }


        }

        @Override
        protected void closeBracket(SampleSMCContext context)
        {
            SampleSMC ctxt = context.getOwner();

            if (ctxt.lenCheck()==true)
            {
                (context.getState()).exit(context);
                // No actions.
                context.setState(SampleSMCMap.Closing);
                (context.getState()).entry(context);
            }

            else
            {
                super.closeBracket(context);
            }

        }

        @Override
        protected void cm(SampleSMCContext context)
        {
            SampleSMC ctxt = context.getOwner();

            if (ctxt.lenCheck()==true)
            {
                (context.getState()).exit(context);
                // No actions.
                context.setState(SampleSMCMap.Comma);
                (context.getState()).entry(context);
            }

            else
            {
                super.cm(context);
            }

        }

        @Override
        protected void digit(SampleSMCContext context, char d)
        {
            SampleSMC ctxt = context.getOwner();

            if (ctxt.lenCheck()==true)
            {
                SampleSMCState endState = context.getState();
                context.clearState();
                try
                {
                    ctxt.lenInc();
                }
                finally
                {
                    context.setState(endState);
                }

            }

            else
            {
                super.digit(context, d);
            }

        }

        @Override
        protected void space(SampleSMCContext context)
        {

            (context.getState()).exit(context);
            context.setState(SampleSMCMap.BlankParam);
            (context.getState()).entry(context);

        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class SampleSMCMap_LetterParam
        extends SampleSMCMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private SampleSMCMap_LetterParam(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void Default(SampleSMCContext context)
        {
            SampleSMC ctxt = context.getOwner();

            (context.getState()).exit(context);
            context.clearState();
            try
            {
                ctxt.notAcceptable();
            }
            finally
            {
                context.setState(SampleSMCMap.Error);
                (context.getState()).entry(context);
            }


        }

        @Override
        protected void closeBracket(SampleSMCContext context)
        {
            SampleSMC ctxt = context.getOwner();

            if (ctxt.lenCheck()==true)
            {
                (context.getState()).exit(context);
                // No actions.
                context.setState(SampleSMCMap.Closing);
                (context.getState()).entry(context);
            }

            else
            {
                super.closeBracket(context);
            }

        }

        @Override
        protected void cm(SampleSMCContext context)
        {
            SampleSMC ctxt = context.getOwner();

            if (ctxt.lenCheck()==true)
            {
                (context.getState()).exit(context);
                // No actions.
                context.setState(SampleSMCMap.Comma);
                (context.getState()).entry(context);
            }

            else
            {
                super.cm(context);
            }

        }

        @Override
        protected void digit(SampleSMCContext context, char d)
        {
            SampleSMC ctxt = context.getOwner();

            if (ctxt.lenCheck()==true)
            {
                SampleSMCState endState = context.getState();
                context.clearState();
                try
                {
                    ctxt.lenInc();
                }
                finally
                {
                    context.setState(endState);
                }

            }

            else
            {
                super.digit(context, d);
            }

        }

        @Override
        protected void letter(SampleSMCContext context, char l)
        {
            SampleSMC ctxt = context.getOwner();

            if (ctxt.lenCheck()==true)
            {
                SampleSMCState endState = context.getState();
                context.clearState();
                try
                {
                    ctxt.lenInc();
                }
                finally
                {
                    context.setState(endState);
                }

            }

            else
            {
                super.letter(context, l);
            }

        }

        @Override
        protected void space(SampleSMCContext context)
        {

            (context.getState()).exit(context);
            context.setState(SampleSMCMap.BlankParam);
            (context.getState()).entry(context);

        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class SampleSMCMap_BlankParam
        extends SampleSMCMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private SampleSMCMap_BlankParam(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void Default(SampleSMCContext context)
        {
            SampleSMC ctxt = context.getOwner();

            (context.getState()).exit(context);
            context.clearState();
            try
            {
                ctxt.notAcceptable();
            }
            finally
            {
                context.setState(SampleSMCMap.Error);
                (context.getState()).entry(context);
            }


        }

        @Override
        protected void closeBracket(SampleSMCContext context)
        {
            SampleSMC ctxt = context.getOwner();

            if (ctxt.lenCheck()==true)
            {
                (context.getState()).exit(context);
                // No actions.
                context.setState(SampleSMCMap.Closing);
                (context.getState()).entry(context);
            }

            else
            {
                super.closeBracket(context);
            }

        }

        @Override
        protected void cm(SampleSMCContext context)
        {

            (context.getState()).exit(context);
            context.setState(SampleSMCMap.Comma);
            (context.getState()).entry(context);

        }

        @Override
        protected void space(SampleSMCContext context)
        {


        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class SampleSMCMap_Comma
        extends SampleSMCMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private SampleSMCMap_Comma(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void Default(SampleSMCContext context)
        {
            SampleSMC ctxt = context.getOwner();

            (context.getState()).exit(context);
            context.clearState();
            try
            {
                ctxt.notAcceptable();
            }
            finally
            {
                context.setState(SampleSMCMap.Error);
                (context.getState()).entry(context);
            }


        }

        @Override
        protected void digit(SampleSMCContext context, char d)
        {
            SampleSMC ctxt = context.getOwner();

            if (ctxt.lenCheck()==true)
            {
                (context.getState()).exit(context);
                context.clearState();
                try
                {
                    ctxt.lenClear();
                }
                finally
                {
                    context.setState(SampleSMCMap.DigitParam);
                    (context.getState()).entry(context);
                }

            }

            else
            {
                super.digit(context, d);
            }

        }

        @Override
        protected void letter(SampleSMCContext context, char l)
        {
            SampleSMC ctxt = context.getOwner();

            if (ctxt.lenCheck()==true)
            {
                (context.getState()).exit(context);
                context.clearState();
                try
                {
                    ctxt.lenClear();
                }
                finally
                {
                    context.setState(SampleSMCMap.LetterParam);
                    (context.getState()).entry(context);
                }

            }

            else
            {
                super.letter(context, l);
            }

        }

        @Override
        protected void space(SampleSMCContext context)
        {


        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class SampleSMCMap_Closing
        extends SampleSMCMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private SampleSMCMap_Closing(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void Default(SampleSMCContext context)
        {
            SampleSMC ctxt = context.getOwner();

            (context.getState()).exit(context);
            context.clearState();
            try
            {
                ctxt.notAcceptable();
            }
            finally
            {
                context.setState(SampleSMCMap.Error);
                (context.getState()).entry(context);
            }


        }

        @Override
        protected void oxford(SampleSMCContext context)
        {

            (context.getState()).exit(context);
            context.setState(SampleSMCMap.Fin);
            (context.getState()).entry(context);

        }

        @Override
        protected void space(SampleSMCContext context)
        {


        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class SampleSMCMap_Fin
        extends SampleSMCMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private SampleSMCMap_Fin(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void Default(SampleSMCContext context)
        {
            SampleSMC ctxt = context.getOwner();

            (context.getState()).exit(context);
            context.clearState();
            try
            {
                ctxt.notAcceptable();
            }
            finally
            {
                context.setState(SampleSMCMap.Error);
                (context.getState()).entry(context);
            }


        }

        @Override
        protected void newLine(SampleSMCContext context)
        {
            SampleSMC ctxt = context.getOwner();

            (context.getState()).exit(context);
            context.clearState();
            try
            {
                ctxt.isAcceptable();
            }
            finally
            {
                context.setState(SampleSMCMap.ReadName);
                (context.getState()).entry(context);
            }


        }

        @Override
        protected void space(SampleSMCContext context)
        {


        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class SampleSMCMap_Error
        extends SampleSMCMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private SampleSMCMap_Error(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void Default(SampleSMCContext context)
        {


        }

        @Override
        protected void reset(SampleSMCContext context)
        {

            (context.getState()).exit(context);
            context.setState(SampleSMCMap.ReadName);
            (context.getState()).entry(context);

        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }
}

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
